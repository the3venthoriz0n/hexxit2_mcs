# Configuration file

##########################################################################################################
# _general
#--------------------------------------------------------------------------------------------------------#
# General and/or miscellaneous options not related to a specific dimension.
##########################################################################################################

_general {
    # If true, the mod will start up in debug mode.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:_debug_mode=false

    # The dimensions that Deadly World will alter terrain generation in.
    # This main config doubles as the overworld config file (dimension 0).
    # Other dimensions each have their own config file.
    #    >> String_Array:[ Value={ dimension_name, dimension_id }, Default={ overworld, the_nether } ]
    S:_enabled_dimensions <
        overworld
     >

    # How long it takes to break floor traps.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=5.0 ]
    D:block_hardness_floor_trap=5.0

    # How long it takes to break Deadly World spawners.
    # The default hardness is the same as vanilla mob spawners.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=10.0 ]
    D:block_hardness_spawners=10.0

    # How long it takes to break tower dispensers.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=10.0 ]
    D:block_hardness_tower_dispenser=10.0

    # The level of pickaxe required to break floor traps in a reasonable time.
    # For vanilla: Wood/Gold = 0, Stone = 1, Iron = 2, Diamond = 3.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:block_harvest_level_floor_trap=1

    # The level of pickaxe required to break Deadly World spawners in a reasonable time.
    # For vanilla: Wood/Gold = 0, Stone = 1, Iron = 2, Diamond = 3.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=2 ]
    I:block_harvest_level_spawners=2

    # The level of pickaxe required to break tower dispensers in a reasonable time.
    # For vanilla: Wood/Gold = 0, Stone = 1, Iron = 2, Diamond = 3.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=2 ]
    I:block_harvest_level_tower_dispenser=2

    # How resistant floor traps are to being destroyed by explosions.
    # Typical explosion resistance is 5 times the hardness.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=25.0 ]
    D:block_resistance_floor_trap=25.0

    # How resistant Deadly World spawners are to being destroyed by explosions.
    # The default explosion resistance is the same as vanilla obsidian.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=2000.0 ]
    D:block_resistance_spawners=2000.0

    # How resistant tower dispensers are to being destroyed by explosions.
    # Typical explosion resistance is 5 times the hardness.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=50.0 ]
    D:block_resistance_tower_dispenser=50.0

    # Set this to false to disable the 'Feature Tester' item.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:item_feature_tester=true

    # Set this to false to disable the blocks automatically built and registered to disguise themselves
    # as the blocks defined as 'replaceable' below.
    # Does not disable the infested variants of cobblestone or the dungeon fill/variant blocks you have set in
    # the "_terrain" category of each dimension.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:silverfish_blocks=true

    # List of blockstates that can be replaced by silverfish blocks in ALL dimensions. Each block defined here
    # will have a corresponding infested version generated and registered. All valid blockstates of these blocks
    # can function and will appear in the creative menu (plus cobblestone and all dungeon fill/variant blocks), but
    # the generator will only replace blocks matching the state definitions in this list.
    #  * Note that only full-cube blocks are supported. There is no reason this shouldn't work with any full-cube
    # blocks used in world generation from other mods.
    #    >> Target_Block_Array:[ Value={ mod_id:block_id, mod_id:block_id[<properties>], mod_id:* }, Default={ minecraft:stone, minecraft:dirt, minecraft:sandstone, minecraft:clay, minecraft:stonebrick, minecraft:red_sandstone, minecraft:cobblestone, minecraft:bookshelf, minecraft:mossy_cobblestone, minecraft:gold_ore, minecraft:iron_ore, minecraft:coal_ore, minecraft:lapis_ore, minecraft:diamond_ore, minecraft:redstone_ore, minecraft:emerald_ore, minecraft:netherrack, minecraft:soul_sand, minecraft:nether_brick, minecraft:red_nether_brick, minecraft:quartz_ore, minecraft:end_stone, minecraft:purpur_block, minecraft:purpur_pillar, minecraft:end_bricks } ]
    S:silverfish_blocks_replaceable <
        minecraft:stone
        minecraft:dirt
        minecraft:sandstone
        minecraft:clay
        minecraft:stonebrick
        minecraft:red_sandstone
        minecraft:cobblestone
        minecraft:mossy_cobblestone
     >

    #  * Progressive spawn delay:
    # By default, spawners added by this mod use a mechanic called "progressive spawn delay". Unlike vanilla
    # spawners that have a completely random delay chosen anywhere from 10 to 40 seconds (what awful variance!),
    # Deadly World spawners will start from a 10 second delay and slowly increase up to 40 seconds delay as you
    # continue to stand close to them (with the same vanilla delay limits of 200-800 ticks).
    # A spawner's "delay buildup" starts at its minimum delay and increases by its progressive delay (+/- 10%)
    # with each successful spawn, up to its maximum delay.
    # The progressive delay of each spawner is determined by its configs when generated and can then be
    # overwritten by nbt editing.
    #  * Now, for the actual config option:
    # The rate at which the progressive spawn delay on spawners recovers while no players are within range.
    # Inactive spawners' "delay buildups" are reduced by (progressive delay * this value) each tick.
    #    >> Double:[ Range={ 0.0, Infinity }, Default=0.0025 ]
    D:spawner_progressive_recovery=0.0025
}


##########################################################################################################
# _terrain
#--------------------------------------------------------------------------------------------------------#
# Options related to the dimension's terrain.
##########################################################################################################

_terrain {
    # The block(s) that can be replaced in this dimension by terrain generation.
    #    >> Target_Block_Array:[ Value={ mod_id:block_id, mod_id:block_id[<properties>], mod_id:* }, Default={ minecraft:stone[variant=stone], minecraft:stone[variant=granite], minecraft:stone[variant=diorite], minecraft:stone[variant=andesite] } ]
    S:_replaceable_blocks <
        minecraft:stone[variant=stone]
        minecraft:stone[variant=granite]
        minecraft:stone[variant=diorite]
        minecraft:stone[variant=andesite]
     >

    # A weighted list of blocks to pick from when covering a floor trap in this dimension.
    #    >> Block_Array:[ Value={ mod_id:block_id <value>, mod_id:block_id[<properties>] <value> }, Default={ minecraft:stone_pressure_plate 100, minecraft:carpet[color=silver] 34, minecraft:carpet[color=gray] 33, minecraft:carpet[color=brown] 33, minecraft:stone_slab 34, minecraft:stone_slab[half=bottom,variant=stone_brick] 33, minecraft:stone_slab[half=bottom,variant=cobblestone] 33, minecraft:red_mushroom 20, minecraft:brown_mushroom 20, minecraft:gold_ore 10, minecraft:cake 1 } ]
    S:floor_trap_covers <
        minecraft:stone_pressure_plate 100
        minecraft:carpet[color=silver] 34
        minecraft:carpet[color=gray] 33
        minecraft:carpet[color=brown] 33
        minecraft:stone_slab 34
        minecraft:stone_slab[half=bottom,variant=stone_brick] 33
        minecraft:stone_slab[half=bottom,variant=cobblestone] 33
        minecraft:red_mushroom 20
        minecraft:brown_mushroom 20
        minecraft:gold_ore 10
        minecraft:cake 1
     >

    # The chance for silverfish emerging from this mod's silverfish blocks in this dimension to spawn
    # already calling for reinforcements, if any players are within eyesight. Be warned this can cascade.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.1 ]
    D:silverfish_aggressive_chance=0.1
}


##########################################################################################################
# features_chests_infested
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of infested chests.
##########################################################################################################

features_chests_infested {
    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.04 ]
    D:_infested_chance=0.02

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_infested_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=60 ]
    I:_infested_height_max=60

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_infested_height_min=12

    # The chance for infested chests to use the 'trapped chest' block instead of a normal chest block.
    # For reference, the loot table for these chests is 'deadlyworld:feature_chests/chests/infested'.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=1.0 ]
    D:_trapped_chance=1.0

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:infested_testing_marker=false

    # The maximum horizontal speed spawned silverfish are launched at.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.2 ]
    D:launch_speed=0.2

    # The number of silverfish spawned when the silverfish event triggers.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=6 ]
    I:silverfish_count=6
}


##########################################################################################################
# features_chests_mimic
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of mimic chests.
##########################################################################################################

features_chests_mimic {
    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.02 ]
    D:_mimic_chance=0.01

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_mimic_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=52 ]
    I:_mimic_height_max=52

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_mimic_height_min=12

    # The chance for mimic chests to use the 'trapped chest' block instead of a normal chest block.
    # For reference, the loot table for these chests is 'deadlyworld:feature_chests/chests/mimic'.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.1 ]
    D:_trapped_chance=0.1

    # Multiplier applied to the spawned mimic's base damage attribute.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=2.0 ]
    D:attrib_mult_damage=2.0

    # Multiplier applied to the spawned mimic's base health attribute.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=2.0 ]
    D:attrib_mult_health=2.0

    # Multiplier applied to the spawned mimic's base movement speed attribute.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.1 ]
    D:attrib_mult_speed=1.1

    # Chance for the spawned mimic to be a baby (only works for Zombies, Pig Zombies, and Animals).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=1.0 ]
    D:baby_chance=1.0

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:mimic_testing_marker=false

    # Weighted list of mobs that can be spawned as "mimics". One of these is chosen
    # at random when the spawn mimic event is triggered.
    #    >> Weighted_Array:[ Value={ mod_id:registry_name weight }, Default={ minecraft:zombie 70457 } ]
    S:spawn_list <
        minecraft:zombie 70457
     >
}


##########################################################################################################
# features_chests_simple
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of simple chests.
##########################################################################################################

features_chests_simple {
    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.1 ]
    D:_simple_chance=0.1

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_simple_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=52 ]
    I:_simple_height_max=52

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_simple_height_min=12

    # The chance for simple chests to use the 'trapped chest' block instead of a normal chest block.
    # For reference, the loot table for these chests is 'deadlyworld:feature_chests/chests/simple'.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.1 ]
    D:_trapped_chance=0.1

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:simple_testing_marker=false
}


##########################################################################################################
# features_chests_surprise
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of surprise chests.
##########################################################################################################

features_chests_surprise {
    # Weight for the lava surprise event type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=5 ]
    I:_event_type_weight_lava=5

    # Weight for the poison gas surprise event type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=5 ]
    I:_event_type_weight_poison_gas=5

    # Weight for the tnt surprise event type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=10 ]
    I:_event_type_weight_tnt=10

    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.04 ]
    D:_surprise_chance=0.02

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_surprise_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=52 ]
    I:_surprise_height_max=52

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_surprise_height_min=12

    # The chance for surprise chests to use the 'trapped chest' block instead of a normal chest block.
    # For reference, the loot table for these chests is 'deadlyworld:feature_chests/chests/surprise'.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=1.0 ]
    D:_trapped_chance=1.0

    # The delay before the poison gas cloud starts spreading, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=20 ]
    I:gas_delay=20

    # The duration (after its initial delay) until the poison gas cloud reaches max size and disappears, in ticks.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=40 ]
    I:gas_duration=40

    # The maximum distance, in blocks, the poison gas cloud spreads from its origin.
    # Note the cloud starts at 0.5 radius and linearly increases to max radius at exactly its max duration.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=12.0 ]
    D:gas_max_radius=12.0

    # Potency of the instant damage effect applied by "poison" gas clouds.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:gas_type_harm_potency=1

    # Duration of the poison effect applied by poison gas clouds, in ticks.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=200 ]
    I:gas_type_poison_duration=200

    # Potency of the poison effect applied by poison gas clouds.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:gas_type_poison_potency=0

    # Weight for the harm potion type to be used for "poison" gas.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:gas_type_weight_harm=0

    # Weight for the poison potion type to be used for "poison" gas.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:gas_type_weight_poison=1

    # Weight for the wither potion type to be used for "poison" gas.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:gas_type_weight_wither=0

    # Duration of the wither effect applied by "poison" gas clouds, in ticks.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=200 ]
    I:gas_type_wither_duration=200

    # Potency of the wither effect applied by "poison" gas clouds.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:gas_type_wither_potency=0

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:surprise_testing_marker=false

    # The number of primed tnt spawned when the tnt event triggers.
    # If you make this more than 1, all items in the chest will probably get destroyed when the tnt goes off.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:tnt_count=1

    # The maximum delay before spawned tnt explodes, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=60 ]
    I:tnt_fuse_time_max=60

    # The minimum delay before spawned tnt explodes, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=40 ]
    I:tnt_fuse_time_min=40

    # The maximum horizontal speed spawned tnt is launched at.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.0 ]
    D:tnt_launch_speed=0.0
}


##########################################################################################################
# features_chests_tnt_floor_trapped
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of tnt_floor_trapped chests.
##########################################################################################################

features_chests_tnt_floor_trapped {
    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.04 ]
    D:_tnt_floor_trapped_chance=0.02

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_tnt_floor_trapped_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=52 ]
    I:_tnt_floor_trapped_height_max=52

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_tnt_floor_trapped_height_min=12

    # The chance for tnt floor trapped chests to use the 'trapped chest' block instead of a normal chest block.
    # For reference, the loot table for these chests is 'deadlyworld:feature_chests/chests/tnt_floor_trapped'.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.0 ]
    D:_trapped_chance=0.0

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:tnt_floor_trapped_testing_marker=false
}


##########################################################################################################
# features_chests_trapped
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of trapped chests.
##########################################################################################################

features_chests_trapped {
    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.0 ]
    D:_trapped_chance=0.0

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_trapped_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=52 ]
    I:_trapped_height_max=52

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_trapped_height_min=12

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:trapped_testing_marker=false
}


##########################################################################################################
# features_chests_valuable
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of valuable chests.
##########################################################################################################

features_chests_valuable {
    # The chance for valuable chests to use the 'trapped chest' block instead of a normal chest block.
    # For reference, the loot table for these chests is 'deadlyworld:feature_chests/chests/valuable'.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.0 ]
    D:_trapped_chance=0.0

    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.02 ]
    D:_valuable_chance=0.04

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_valuable_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=32 ]
    I:_valuable_height_max=32

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_valuable_height_min=12

    # A weighted list of blocks to pick from to make up the blocks that surround this chest.
    #    >> Block_Array:[ Value={ mod_id:block_id <value>, mod_id:block_id[<properties>] <value> }, Default={ minecraft:cobblestone 50, minecraft:mossy_cobblestone 20, minecraft:stone 20, minecraft:stone[variant=andesite] 50, minecraft:stone[variant=smooth_andesite] 50, minecraft:dirt 50, minecraft:dirt[snowy=false,variant=coarse_dirt] 50, minecraft:clay 50, minecraft:gravel 20, minecraft:wool[color=silver] 50, minecraft:obsidian 20 } ]
    S:cover_block_list <
        minecraft:cobblestone 50
        minecraft:mossy_cobblestone 20
        minecraft:stone 20
        minecraft:stone[variant=andesite] 50
        minecraft:stone[variant=smooth_andesite] 50
        minecraft:dirt 50
        minecraft:dirt[snowy=false,variant=coarse_dirt] 50
        minecraft:clay 50
        minecraft:gravel 20
        minecraft:wool[color=silver] 50
        minecraft:obsidian 20
     >

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:valuable_testing_marker=false
}


##########################################################################################################
# features_dungeons
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of dungeons.
##########################################################################################################

features_dungeons {
    # The maximum number of chests to generate in each dungeon. The default is the same as vanilla.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=2 ]
    I:_chest_count_max=2

    # The minimum number of chests to generate in each dungeon.
    # Note that occasionally chests will fail to generate, resulting in fewer chests than the minimum.
    # Chests are more likely to fail in vanilla dungeons, so maybe set this to 1 for a more vanilla experience.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=2 ]
    I:_chest_count_min=2

    # Suppresses dungeon generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:_disable_vanilla_dungeons=true

    # The number of placement attempts for this feature type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=8.0 ]
    D:_dungeons_count=8.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_dungeons_count_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=256 ]
    I:_dungeons_height_max=256

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:_dungeons_height_min=0

    # A weighted list of blocks to pick from when generating the floor of dungeons.
    # For a vanilla dungeon look, set cobblestone to 150 and mossy cobblestone to 50.
    #    >> Block_Array:[ Value={ mod_id:block_id <value>, mod_id:block_id[<properties>] <value> }, Default={ minecraft:cobblestone 100, minecraft:mossy_cobblestone 70 } ]
    S:_floor_blocks <
        minecraft:cobblestone 100
        minecraft:mossy_cobblestone 70
     >

    # The maximum number of open wall spaces a prospective spawn attempt can have without being canceled.
    # Loosening open wall restrictions allows more dungeons to spawn in the world, and affects how open/closed-off they feel.
    # For vanilla dungeons, this value is 5.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=10 ]
    I:_open_walls_max=10

    # The minimum number of open wall spaces a prospective spawn attempt must have to not be canceled.
    # The default is the same as vanilla. Setting this to 0 allows dungeons to generate completely unconnected to any caves, ravines, etc.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:_open_walls_min=1

    # The chance for each wall and floor block in the dungeon to be infested with silverfish.
    # For this to function, both the fill and variant blocks must be silverfish replaceable and silverfish autogen must be enabled.
    # Vanilla dungeons do not generate any silverfish blocks.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.2 ]
    D:_silverfish_chance=0.2

    # A weighted list of blocks to pick from when generating the walls of dungeons.
    # For a vanilla dungeon look, set this to only cobblestone.
    #    >> Block_Array:[ Value={ mod_id:block_id <value>, mod_id:block_id[<properties>] <value> }, Default={ minecraft:cobblestone 100, minecraft:mossy_cobblestone 35 } ]
    S:_wall_blocks <
        minecraft:cobblestone 100
        minecraft:mossy_cobblestone 35
     >

    # The maximum width of dungeons. This refers to the open space, not including walls or anything inside.
    # Note that dungeons can only generate in odd widths, and each axis is rolled separately. Vanilla dungeons are max 7 wide.
    #    >> Integer:[ Range={ 3, 2147483647 }, Default=11 ]
    I:_width_max=11

    # The minimum width of dungeons. This refers to the open space, not including walls or anything inside.
    # Note that dungeons can only generate in odd widths, and each axis is rolled separately. The default is the same as vanilla.
    #    >> Integer:[ Range={ 3, 2147483647 }, Default=5 ]
    I:_width_min=5

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:dungeons_testing_marker=false

    # Weight for the spawner dungeon to be generated in dungeons.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=100 ]
    I:subfeature_weight_spawner_dungeon=100

    # Weight for the tower fire arrow to be generated in dungeons.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=10 ]
    I:subfeature_weight_tower_fire_arrow=10

    # Weight for the tower fireball to be generated in dungeons.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=5 ]
    I:subfeature_weight_tower_fireball=5

    # Weight for the tower gatling arrow to be generated in dungeons.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=5 ]
    I:subfeature_weight_tower_gatling_arrow=5

    # Weight for the tower potion arrow to be generated in dungeons.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=10 ]
    I:subfeature_weight_tower_potion_arrow=10

    # Weight for the tower simple arrow to be generated in dungeons.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=10 ]
    I:subfeature_weight_tower_simple_arrow=10
}


##########################################################################################################
# features_dungeons_spawner
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of dungeon spawners. These are only generated as a subfeature of dungeons.
##########################################################################################################

features_dungeons_spawner {
    # The chance for dungeon spawners to generate as 'dynamic'.
    # Dynamic spawners pick a new mob to spawn after each spawn.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.08 ]
    D:_dynamic_chance=0.08

    # Weighted list of mobs that can be spawned by dungeon spawners. One of these is chosen
    # at random when the spawner is generated. Spawners that are generated as 'dynamic' will pick again
    # between each spawn.
    #    >> Weighted_Array:[ Value={ mod_id:registry_name weight }, Default={ minecraft:zombie 200, minecraft:skeleton 100, minecraft:spider 100, minecraft:cave_spider 10, minecraft:creeper 10, minecraft:silverfish 10 } ]
    S:_spawn_list <
        minecraft:zombie 200
        minecraft:skeleton 100
        minecraft:spider 100
        minecraft:cave_spider 10
        minecraft:creeper 10
        minecraft:silverfish 10
     >

    # The trap will be triggered once a player comes within this distance (spherical distance).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=16.0 ]
    D:activation_range=14.0

    # When the sight check is enabled, dungeon spawners will only trigger when they have direct
    # line-of-sight to a player within activation range.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:activation_sight_check=false

    # Bonus added to spawned entities' base armor attributes.
    #    >> Float:[ Range={ 0.0, 30.0 }, Default=15.0 ]
    D:attrib_add_armor=15.0

    # Bonus added to spawned entities' base armor toughness attributes.
    #    >> Float:[ Range={ 0.0, 20.0 }, Default=8.0 ]
    D:attrib_add_armor_toughness=8.0

    # Bonus added to spawned entities' base knockback resistance attributes (1.00 = 100% chance to resist).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.0 ]
    D:attrib_add_knockback_resist=0.0

    # Multiplier applied to spawned entities' base attack damage attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.5 ]
    D:attrib_mult_damage=1.5

    # Multiplier applied to spawned entities' base health attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:attrib_mult_health=1.0

    # Multiplier applied to spawned entities' base movement speed attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:attrib_mult_speed=1.0

    # The maximumm delay between spawns, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=800 ]
    I:delay_max=800

    # The minimum delay between spawns, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=200 ]
    I:delay_min=240

    # Each spawn increases the spawner's delay buildup by this many ticks (+/- 10%). Set this to 0 to
    # revert to the lame vanilla spawner behavior (simple random between min and max).
    #  * See the main config for a more in-depth description of progressive spawn delay, as well as
    #    the global recovery rate option.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=40 ]
    I:delay_progressive=40

    # The number of mobs to attempt creating with each spawn. May spawn fewer depending on nearby obstructions.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=4 ]
    I:spawn_count=4

    # The maximum horizontal range to spawn mobs in.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=4.0 ]
    D:spawn_range=4.0
}


##########################################################################################################
# features_floor_traps_potion
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of potion traps in floors.
##########################################################################################################

features_floor_traps_potion {
    # The chance for potion floor traps to generate with a 'cover' block placed on top.
    # The possible cover blocks are determined in the dimension's terrain config section.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.5 ]
    D:_cover_chance=0.5

    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.2 ]
    D:_potion_chance=0.1

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_potion_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=60 ]
    I:_potion_height_max=60

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_potion_height_min=12

    # The trap will be triggered once a player comes within this distance (spherical distance).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=3.3 ]
    D:activation_range=3.3

    # When the sight check is enabled, potion floor traps will only trigger when they have direct
    # line-of-sight to a player within activation range.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:activation_sight_check=true

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:potion_testing_marker=false

    # The maximum delay before potion traps can be tripped again, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=40 ]
    I:reset_time_max=40

    # The minimum delay before potion traps can be tripped again, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=20 ]
    I:reset_time_min=20

    # Duration of the effects applied by daze potion traps, in ticks (affected by proximity to the splash).
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=2000 ]
    I:type_daze_duration=2000

    # Potency of the weakness, fatigue, and slowness effects applied by daze potion traps.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:type_daze_potency=0

    # Potency of the instant damage effect applied by harm potion traps.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:type_harm_potency=1

    # Duration of the hunger effect applied by hunger potion traps, in ticks (affected by proximity to the splash).
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=2000 ]
    I:type_hunger_duration=2000

    # Potency of the hunger effect applied by hunger potion traps.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:type_hunger_potency=0

    # Duration of the levitation effect applied by levitation potion traps, in ticks (affected by proximity to the splash).
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=200 ]
    I:type_levitation_duration=200

    # Potency of the levitation effect applied by levitation potion traps.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:type_levitation_potency=1

    # Duration of the poison effect applied by poison potion traps, in ticks (affected by proximity to the splash).
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1600 ]
    I:type_poison_duration=1600

    # Potency of the poison effect applied by poison potion traps.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:type_poison_potency=0

    # Weight for the daze potion trap type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=5 ]
    I:type_weight_daze=5

    # Weight for the harm potion trap type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=10 ]
    I:type_weight_harm=10

    # Weight for the hunger potion trap type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=5 ]
    I:type_weight_hunger=5

    # Weight for the levitation potion trap type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=5 ]
    I:type_weight_levitation=5

    # Weight for the poison potion trap type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=5 ]
    I:type_weight_poison=5
}


##########################################################################################################
# features_floor_traps_tnt
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of tnt traps in floors.
##########################################################################################################

features_floor_traps_tnt {
    # The chance for tnt floor traps to generate with a 'cover' block placed on top.
    # The possible cover blocks are determined in the dimension's terrain config section.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.5 ]
    D:_cover_chance=0.5

    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.2 ]
    D:_tnt_chance=0.1

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_tnt_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=60 ]
    I:_tnt_height_max=60

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_tnt_height_min=12

    # The trap will be triggered once a player comes within this distance (spherical distance).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=3.3 ]
    D:activation_range=3.3

    # When the sight check is enabled, tnt floor traps will only trigger when they have direct
    # line-of-sight to a player within activation range.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:activation_sight_check=true

    # The maximum delay before spawned tnt explodes, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=50 ]
    I:fuse_time_max=50

    # The minimum delay before spawned tnt explodes, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=40 ]
    I:fuse_time_min=40

    # The maximum horizontal speed spawned tnt is launched at.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.3 ]
    D:launch_speed=0.3

    # The number of primed tnt spawned when the trap triggers.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=4 ]
    I:tnt_count=4

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:tnt_testing_marker=false
}


##########################################################################################################
# features_floor_traps_tnt_mob
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of tnt_mob traps in floors.
##########################################################################################################

features_floor_traps_tnt_mob {
    # The chance for tnt mob floor traps to generate with a 'cover' block placed on top.
    # The possible cover blocks are determined in the dimension's terrain config section.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.5 ]
    D:_cover_chance=0.5

    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.1 ]
    D:_tnt_mob_chance=0.05

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_tnt_mob_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=60 ]
    I:_tnt_mob_height_max=60

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_tnt_mob_height_min=12

    # The trap will be triggered once a player comes within this distance (spherical distance).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=3.3 ]
    D:activation_range=3.3

    # When the sight check is enabled, tnt mob floor traps will only trigger when they have direct
    # line-of-sight to a player within activation range.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:activation_sight_check=true

    # Multiplier applied to the spawned entity's base health attribute.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.5 ]
    D:attrib_mult_health=0.5

    # Multiplier applied to the spawned entity's base movement speed attribute.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.3 ]
    D:attrib_mult_speed=1.3

    # The maximum delay before the tnt "hat" explodes, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=80 ]
    I:fuse_time_max=80

    # The minimum delay before the tnt "hat" explodes, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=70 ]
    I:fuse_time_min=70

    # Weighted list of mobs that can be spawned by tnt mob traps. One of these is chosen
    # at random when the trap is triggered.
    #    >> Weighted_Array:[ Value={ mod_id:registry_name weight }, Default={ minecraft:zombie 200, minecraft:skeleton 100, minecraft:spider 100, minecraft:cave_spider 10, minecraft:silverfish 10 } ]
    S:spawn_list <
        minecraft:zombie 200
        minecraft:skeleton 100
        minecraft:spider 100
        minecraft:cave_spider 10
        minecraft:silverfish 10
     >

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:tnt_mob_testing_marker=false
}


##########################################################################################################
# features_spawners_brutal
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of brutal spawners.
##########################################################################################################

features_spawners_brutal {
    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.02 ]
    D:_brutal_chance=0.005

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_brutal_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=32 ]
    I:_brutal_height_max=32

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_brutal_height_min=12

    # The chance for a chest to generate beneath brutal spawners.
    # For reference, the loot table for these chests is 'deadlyworld:feature_chests/deadly_spawners/brutal'.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=1.0 ]
    D:_chest_chance=1.0

    # The chance for brutal spawners to generate as 'dynamic'.
    # Dynamic spawners pick a new mob to spawn after each spawn.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.08 ]
    D:_dynamic_chance=0.08

    # Weighted list of mobs that can be spawned by brutal spawners. One of these is chosen
    # at random when the spawner is generated. Spawners that are generated as 'dynamic' will pick again
    # between each spawn.
    #    >> Weighted_Array:[ Value={ mod_id:registry_name weight }, Default={ minecraft:zombie 200, minecraft:skeleton 100, minecraft:spider 100, minecraft:cave_spider 10, minecraft:creeper 10, minecraft:silverfish 10 } ]
    S:_spawn_list <
        minecraft:zombie 200
        minecraft:skeleton 100
        minecraft:spider 100
        minecraft:cave_spider 10
        minecraft:creeper 10
        minecraft:silverfish 10
     >

    # The trap will be triggered once a player comes within this distance (spherical distance).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=16.0 ]
    D:activation_range=12.0

    # When the sight check is enabled, brutal spawners will only trigger when they have direct
    # line-of-sight to a player within activation range.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:activation_sight_check=true

    # Bonus added to spawned entities' base armor attributes.
    #    >> Float:[ Range={ 0.0, 30.0 }, Default=15.0 ]
    D:attrib_add_armor=15.0

    # Bonus added to spawned entities' base armor toughness attributes.
    #    >> Float:[ Range={ 0.0, 20.0 }, Default=8.0 ]
    D:attrib_add_armor_toughness=8.0

    # Bonus added to spawned entities' base knockback resistance attributes (1.00 = 100% chance to resist).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.2 ]
    D:attrib_add_knockback_resist=0.2

    # Multiplier applied to spawned entities' base attack damage attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.5 ]
    D:attrib_mult_damage=1.5

    # Multiplier applied to spawned entities' base health attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.5 ]
    D:attrib_mult_health=1.5

    # Multiplier applied to spawned entities' base movement speed attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.2 ]
    D:attrib_mult_speed=1.2

    # If true, the potion effects applied to spawned mobs will not spawn potion fx particles.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:brutal_ambient_fx=false

    # If true, non-creeper mobs spawned by brutal spawners will have the 'fire resistance' potion effect.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:brutal_fire_resistance=true

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:brutal_testing_marker=false

    # If true, non-creeper mobs spawned by brutal spawners will have the 'water breathing' potion effect.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:brutal_water_breathing=true

    # The maximumm delay between spawns, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=800 ]
    I:delay_max=900

    # The minimum delay between spawns, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=200 ]
    I:delay_min=240

    # Each spawn increases the spawner's delay buildup by this many ticks (+/- 10%). Set this to 0 to
    # revert to the lame vanilla spawner behavior (simple random between min and max).
    #  * See the main config for a more in-depth description of progressive spawn delay, as well as
    #    the global recovery rate option.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=100 ]
    I:delay_progressive=100

    # The number of mobs to attempt creating with each spawn. May spawn fewer depending on nearby obstructions.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=2 ]
    I:spawn_count=2

    # The maximum horizontal range to spawn mobs in.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=3.0 ]
    D:spawn_range=3.0

    # A weighted list of blocks to pick from when placing the decoration block on top of brutal spawners.
    #    >> Block_Array:[ Value={ mod_id:block_id <value>, mod_id:block_id[<properties>] <value> }, Default={ minecraft:stonebrick[variant=chiseled_stonebrick] 70457 } ]
    S:topper_blocks <
        minecraft:stonebrick[variant=chiseled_stonebrick] 70457
     >

    # Chance to place a vines block for decoration in each adjacent air block.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.4 ]
    D:vines_chance=0.4
}


##########################################################################################################
# features_spawners_nest
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of nest spawners.
##########################################################################################################

features_spawners_nest {
    # The chance for a chest to generate beneath silverfish nests.
    # For reference, the loot table for these chests is 'deadlyworld:feature_chests/deadly_spawners/nest'.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.33 ]
    D:_chest_chance=0.5

    # The chance for silverfish nests to generate as 'dynamic'.
    # Dynamic spawners pick a new mob to spawn after each spawn.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.0 ]
    D:_dynamic_chance=0.0

    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.16 ]
    D:_nest_chance=0.02

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_nest_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=62 ]
    I:_nest_height_max=62

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_nest_height_min=12

    # Weighted list of mobs that can be spawned by silverfish nests. One of these is chosen
    # at random when the spawner is generated. Spawners that are generated as 'dynamic' will pick again
    # between each spawn.
    #    >> Weighted_Array:[ Value={ mod_id:registry_name weight }, Default={ minecraft:silverfish 70457 } ]
    S:_spawn_list <
        minecraft:silverfish 70457
     >

    # The trap will be triggered once a player comes within this distance (spherical distance).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=16.0 ]
    D:activation_range=8.0

    # When the sight check is enabled, silverfish nests will only trigger when they have direct
    # line-of-sight to a player within activation range.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:activation_sight_check=false

    # Bonus added to spawned entities' base armor attributes.
    #    >> Float:[ Range={ 0.0, 30.0 }, Default=0.0 ]
    D:attrib_add_armor=0.0

    # Bonus added to spawned entities' base armor toughness attributes.
    #    >> Float:[ Range={ 0.0, 20.0 }, Default=0.0 ]
    D:attrib_add_armor_toughness=0.0

    # Bonus added to spawned entities' base knockback resistance attributes (1.00 = 100% chance to resist).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.0 ]
    D:attrib_add_knockback_resist=0.0

    # Multiplier applied to spawned entities' base attack damage attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:attrib_mult_damage=1.0

    # Multiplier applied to spawned entities' base health attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:attrib_mult_health=1.0

    # Multiplier applied to spawned entities' base movement speed attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:attrib_mult_speed=1.0

    # The maximumm delay between spawns, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=400 ]
    I:delay_max=600

    # The minimum delay between spawns, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=100 ]
    I:delay_min=140

    # Each spawn increases the spawner's delay buildup by this many ticks (+/- 10%). Set this to 0 to
    # revert to the lame vanilla spawner behavior (simple random between min and max).
    #  * See the main config for a more in-depth description of progressive spawn delay, as well as
    #    the global recovery rate option.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=20 ]
    I:delay_progressive=20

    # A weighted list of blocks to pick from to make up the entire nest. All blocks will be replaced with
    # silverfish-infested versions, limited by your silverfish replaceable/autogen settings.
    #    >> Block_Array:[ Value={ mod_id:block_id <value>, mod_id:block_id[<properties>] <value> }, Default={ minecraft:cobblestone 300, minecraft:mossy_cobblestone 20, minecraft:clay 20, minecraft:gold_ore 5, minecraft:lapis_ore 5, minecraft:diamond_ore 5, minecraft:emerald_ore 5 } ]
    S:nest_block_list <
        minecraft:cobblestone 300
        minecraft:mossy_cobblestone 20
        minecraft:clay 20
        minecraft:gold_ore 5
        minecraft:lapis_ore 5
        minecraft:diamond_ore 5
        minecraft:emerald_ore 5
     >

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:nest_testing_marker=false

    # The number of mobs to attempt creating with each spawn. May spawn fewer depending on nearby obstructions.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=6 ]
    I:spawn_count=5

    # The maximum horizontal range to spawn mobs in.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=6.0 ]
    D:spawn_range=6.0
}


##########################################################################################################
# features_spawners_simple
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of simple spawners.
##########################################################################################################

features_spawners_simple {
    # The chance for a chest to generate beneath simple spawners.
    # For reference, the loot table for these chests is 'deadlyworld:feature_chests/deadly_spawners/simple'.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.33 ]
    D:_chest_chance=0.5

    # The chance for simple spawners to generate as 'dynamic'.
    # Dynamic spawners pick a new mob to spawn after each spawn.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.08 ]
    D:_dynamic_chance=0.08

    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.16 ]
    D:_simple_chance=0.02

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_simple_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=52 ]
    I:_simple_height_max=52

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_simple_height_min=12

    # Weighted list of mobs that can be spawned by simple spawners. One of these is chosen
    # at random when the spawner is generated. Spawners that are generated as 'dynamic' will pick again
    # between each spawn.
    #    >> Weighted_Array:[ Value={ mod_id:registry_name weight }, Default={ minecraft:zombie 200, minecraft:skeleton 100, minecraft:spider 100, minecraft:cave_spider 10, minecraft:creeper 10, minecraft:silverfish 10 } ]
    S:_spawn_list <
        minecraft:zombie 200
        minecraft:skeleton 100
        minecraft:spider 100
        minecraft:cave_spider 10
        minecraft:creeper 10
        minecraft:silverfish 10
     >

    # The trap will be triggered once a player comes within this distance (spherical distance).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=16.0 ]
    D:activation_range=16.0

    # When the sight check is enabled, simple spawners will only trigger when they have direct
    # line-of-sight to a player within activation range.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:activation_sight_check=false

    # Bonus added to spawned entities' base armor attributes.
    #    >> Float:[ Range={ 0.0, 30.0 }, Default=0.0 ]
    D:attrib_add_armor=0.0

    # Bonus added to spawned entities' base armor toughness attributes.
    #    >> Float:[ Range={ 0.0, 20.0 }, Default=0.0 ]
    D:attrib_add_armor_toughness=0.0

    # Bonus added to spawned entities' base knockback resistance attributes (1.00 = 100% chance to resist).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.0 ]
    D:attrib_add_knockback_resist=0.0

    # Multiplier applied to spawned entities' base attack damage attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:attrib_mult_damage=1.0

    # Multiplier applied to spawned entities' base health attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:attrib_mult_health=1.0

    # Multiplier applied to spawned entities' base movement speed attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:attrib_mult_speed=1.0

    # The maximumm delay between spawns, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=800 ]
    I:delay_max=800

    # The minimum delay between spawns, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=200 ]
    I:delay_min=200

    # Each spawn increases the spawner's delay buildup by this many ticks (+/- 10%). Set this to 0 to
    # revert to the lame vanilla spawner behavior (simple random between min and max).
    #  * See the main config for a more in-depth description of progressive spawn delay, as well as
    #    the global recovery rate option.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=40 ]
    I:delay_progressive=40

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:simple_testing_marker=false

    # The number of mobs to attempt creating with each spawn. May spawn fewer depending on nearby obstructions.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=4 ]
    I:spawn_count=4

    # The maximum horizontal range to spawn mobs in.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=4.0 ]
    D:spawn_range=4.0

    # A weighted list of blocks to pick from when placing the decoration block on top of simple spawners.
    #    >> Block_Array:[ Value={ mod_id:block_id <value>, mod_id:block_id[<properties>] <value> }, Default={ minecraft:cobblestone 100, minecraft:mossy_cobblestone 100 } ]
    S:topper_blocks <
        minecraft:cobblestone 100
        minecraft:mossy_cobblestone 100
     >
}


##########################################################################################################
# features_spawners_stream
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of stream spawners.
##########################################################################################################

features_spawners_stream {
    # The chance for a chest to generate beneath stream spawners.
    # For reference, the loot table for these chests is 'deadlyworld:feature_chests/deadly_spawners/stream'.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=1.0 ]
    D:_chest_chance=1.0

    # The chance for stream spawners to generate as 'dynamic'.
    # Dynamic spawners pick a new mob to spawn after each spawn.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=1.0 ]
    D:_dynamic_chance=1.0

    # Weighted list of mobs that can be spawned by stream spawners. One of these is chosen
    # at random when the spawner is generated. Spawners that are generated as 'dynamic' will pick again
    # between each spawn.
    #    >> Weighted_Array:[ Value={ mod_id:registry_name weight }, Default={ minecraft:zombie 200, minecraft:skeleton 100, minecraft:spider 100, minecraft:cave_spider 10, minecraft:creeper 10, minecraft:silverfish 10 } ]
    S:_spawn_list <
        minecraft:zombie 200
        minecraft:skeleton 100
        minecraft:spider 100
        minecraft:cave_spider 10
        minecraft:creeper 10
        minecraft:silverfish 10
     >

    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.04 ]
    D:_stream_chance=0.01

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_stream_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=42 ]
    I:_stream_height_max=42

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_stream_height_min=12

    # The trap will be triggered once a player comes within this distance (spherical distance).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=16.0 ]
    D:activation_range=14.0

    # When the sight check is enabled, stream spawners will only trigger when they have direct
    # line-of-sight to a player within activation range.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:activation_sight_check=true

    # Bonus added to spawned entities' base armor attributes.
    #    >> Float:[ Range={ 0.0, 30.0 }, Default=0.0 ]
    D:attrib_add_armor=0.0

    # Bonus added to spawned entities' base armor toughness attributes.
    #    >> Float:[ Range={ 0.0, 20.0 }, Default=0.0 ]
    D:attrib_add_armor_toughness=0.0

    # Bonus added to spawned entities' base knockback resistance attributes (1.00 = 100% chance to resist).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.0 ]
    D:attrib_add_knockback_resist=0.0

    # Multiplier applied to spawned entities' base attack damage attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:attrib_mult_damage=1.0

    # Multiplier applied to spawned entities' base health attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:attrib_mult_health=1.0

    # Multiplier applied to spawned entities' base movement speed attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:attrib_mult_speed=1.0

    # The maximumm delay between spawns, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=400 ]
    I:delay_max=400

    # The minimum delay between spawns, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:delay_min=0

    # Each spawn increases the spawner's delay buildup by this many ticks (+/- 10%). Set this to 0 to
    # revert to the lame vanilla spawner behavior (simple random between min and max).
    #  * See the main config for a more in-depth description of progressive spawn delay, as well as
    #    the global recovery rate option.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=10 ]
    I:delay_progressive=10

    # The number of mobs to attempt creating with each spawn. May spawn fewer depending on nearby obstructions.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:spawn_count=1

    # The maximum horizontal range to spawn mobs in.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=2.0 ]
    D:spawn_range=2.0

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:stream_testing_marker=false

    # A weighted list of blocks to pick from when placing the decoration block on top of stream spawners.
    #    >> Block_Array:[ Value={ mod_id:block_id <value>, mod_id:block_id[<properties>] <value> }, Default={ minecraft:red_sandstone[type=chiseled_red_sandstone] 70457 } ]
    S:topper_blocks <
        minecraft:red_sandstone[type=chiseled_red_sandstone] 70457
     >
}


##########################################################################################################
# features_spawners_swarm
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of swarm spawners.
##########################################################################################################

features_spawners_swarm {
    # The chance for a chest to generate beneath swarm spawners.
    # For reference, the loot table for these chests is 'deadlyworld:feature_chests/deadly_spawners/swarm'.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=1.0 ]
    D:_chest_chance=1.0

    # The chance for swarm spawners to generate as 'dynamic'.
    # Dynamic spawners pick a new mob to spawn after each spawn.
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.08 ]
    D:_dynamic_chance=0.08

    # Weighted list of mobs that can be spawned by swarm spawners. One of these is chosen
    # at random when the spawner is generated. Spawners that are generated as 'dynamic' will pick again
    # between each spawn.
    #    >> Weighted_Array:[ Value={ mod_id:registry_name weight }, Default={ minecraft:zombie 200, minecraft:skeleton 100, minecraft:spider 100, minecraft:cave_spider 10, minecraft:creeper 10, minecraft:silverfish 10 } ]
    S:_spawn_list <
        minecraft:zombie 200
        minecraft:skeleton 100
        minecraft:spider 100
        minecraft:cave_spider 10
        minecraft:creeper 10
        minecraft:silverfish 10
     >

    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.02 ]
    D:_swarm_chance=0.005

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_swarm_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=32 ]
    I:_swarm_height_max=32

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_swarm_height_min=12

    # The trap will be triggered once a player comes within this distance (spherical distance).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=20.0 ]
    D:activation_range=20.0

    # When the sight check is enabled, swarm spawners will only trigger when they have direct
    # line-of-sight to a player within activation range.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:activation_sight_check=true

    # Bonus added to spawned entities' base armor attributes.
    #    >> Float:[ Range={ 0.0, 30.0 }, Default=0.0 ]
    D:attrib_add_armor=0.0

    # Bonus added to spawned entities' base armor toughness attributes.
    #    >> Float:[ Range={ 0.0, 20.0 }, Default=0.0 ]
    D:attrib_add_armor_toughness=0.0

    # Bonus added to spawned entities' base knockback resistance attributes (1.00 = 100% chance to resist).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.0 ]
    D:attrib_add_knockback_resist=0.0

    # Multiplier applied to spawned entities' base attack damage attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:attrib_mult_damage=1.0

    # Multiplier applied to spawned entities' base health attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:attrib_mult_health=0.7

    # Multiplier applied to spawned entities' base movement speed attributes.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:attrib_mult_speed=1.0

    # The maximumm delay between spawns, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=2400 ]
    I:delay_max=2400

    # The minimum delay between spawns, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=400 ]
    I:delay_min=500

    # Each spawn increases the spawner's delay buildup by this many ticks (+/- 10%). Set this to 0 to
    # revert to the lame vanilla spawner behavior (simple random between min and max).
    #  * See the main config for a more in-depth description of progressive spawn delay, as well as
    #    the global recovery rate option.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=100 ]
    I:delay_progressive=100

    # The number of mobs to attempt creating with each spawn. May spawn fewer depending on nearby obstructions.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:spawn_count=10

    # The maximum horizontal range to spawn mobs in.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=8.0 ]
    D:spawn_range=8.0

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:swarm_testing_marker=false

    # A weighted list of blocks to pick from when placing the decoration block on top of swarm spawners.
    #    >> Block_Array:[ Value={ mod_id:block_id <value>, mod_id:block_id[<properties>] <value> }, Default={ minecraft:sandstone[type=chiseled_sandstone] 70457 } ]
    S:topper_blocks <
        minecraft:sandstone[type=chiseled_sandstone] 70457
     >
}


##########################################################################################################
# features_towers_fire
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of fire tower traps.
##########################################################################################################

features_towers_fire {
    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.04 ]
    D:_fire_chance=0.01

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_fire_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=52 ]
    I:_fire_height_max=52

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_fire_height_min=12

    # The trap will be triggered once a player comes within this distance (spherical distance).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=10.0 ]
    D:activation_range=10.0

    # When the sight check is enabled, fire arrow tower traps will only trigger when they have direct
    # line-of-sight to a player within activation range.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:activation_sight_check=true

    # Damage dealt by fire arrow tower traps' attacks. This translates roughly into half-hearts of damage.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=6.0 ]
    D:attack_damage=6.0

    # The maximumm delay between attack, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=60 ]
    I:attack_delay_max=60

    # The minimum delay between attacks, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=20 ]
    I:attack_delay_min=20

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:fire_testing_marker=false

    # The maximum height the tower can generate to reach out of non-solid blocks (like lava).
    # Note that this allows the tower to stretch above the "_fire_height_max" setting.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=4 ]
    I:max_tower_height=4

    # A weighted list of blocks to pick from when generating the bottom portion of fire arrow tower traps.
    #    >> Block_Array:[ Value={ mod_id:block_id <value>, mod_id:block_id[<properties>] <value> }, Default={ minecraft:cobblestone 100, minecraft:mossy_cobblestone 50 } ]
    S:pillar_blocks <
        minecraft:cobblestone 100
        minecraft:mossy_cobblestone 50
     >

    # Multiplier for how fast projectiles fired by fire arrow tower traps move through the air.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.5 ]
    D:projectile_speed=1.5

    # The higher this value, the less accurate projectiles fired by fire arrow tower traps are.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=6.0 ]
    D:projectile_variance=6.0
}


##########################################################################################################
# features_towers_fireball
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of fireball tower traps.
##########################################################################################################

features_towers_fireball {
    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.02 ]
    D:_fireball_chance=0.005

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_fireball_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=32 ]
    I:_fireball_height_max=32

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_fireball_height_min=12

    # The trap will be triggered once a player comes within this distance (spherical distance).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=10.0 ]
    D:activation_range=10.0

    # When the sight check is enabled, fireball tower traps will only trigger when they have direct
    # line-of-sight to a player within activation range.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:activation_sight_check=true

    # The maximumm delay between attack, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=40 ]
    I:attack_delay_max=40

    # The minimum delay between attacks, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=20 ]
    I:attack_delay_min=20

    # Number of fireballs shot by fireball tower traps' attacks. Fireballs deal a fixed 5 damage (half-hearts).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=3.0 ]
    D:attack_shots=3.0

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:fireball_testing_marker=false

    # The maximum height the tower can generate to reach out of non-solid blocks (like lava).
    # Note that this allows the tower to stretch above the "_fireball_height_max" setting.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=4 ]
    I:max_tower_height=4

    # A weighted list of blocks to pick from when generating the bottom portion of fireball tower traps.
    #    >> Block_Array:[ Value={ mod_id:block_id <value>, mod_id:block_id[<properties>] <value> }, Default={ minecraft:cobblestone 100, minecraft:mossy_cobblestone 50 } ]
    S:pillar_blocks <
        minecraft:cobblestone 100
        minecraft:mossy_cobblestone 50
     >

    # Multiplier for how fast projectiles fired by fireball tower traps move through the air.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:projectile_speed=1.0

    # The higher this value, the less accurate projectiles fired by fireball tower traps are.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=8.0 ]
    D:projectile_variance=8.0
}


##########################################################################################################
# features_towers_gatling
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of gatling tower traps.
##########################################################################################################

features_towers_gatling {
    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.02 ]
    D:_gatling_chance=0.005

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_gatling_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=32 ]
    I:_gatling_height_max=32

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_gatling_height_min=12

    # The trap will be triggered once a player comes within this distance (spherical distance).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=10.0 ]
    D:activation_range=10.0

    # When the sight check is enabled, gatling arrow tower traps will only trigger when they have direct
    # line-of-sight to a player within activation range.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:activation_sight_check=true

    # Damage dealt by gatling arrow tower traps' attacks. This translates roughly into half-hearts of damage.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=4.0 ]
    D:attack_damage=4.0

    # The maximumm delay between attack, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=22 ]
    I:attack_delay_max=22

    # The minimum delay between attacks, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=11 ]
    I:attack_delay_min=11

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:gatling_testing_marker=false

    # The maximum height the tower can generate to reach out of non-solid blocks (like lava).
    # Note that this allows the tower to stretch above the "_gatling_height_max" setting.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=4 ]
    I:max_tower_height=4

    # A weighted list of blocks to pick from when generating the bottom portion of gatling arrow tower traps.
    #    >> Block_Array:[ Value={ mod_id:block_id <value>, mod_id:block_id[<properties>] <value> }, Default={ minecraft:cobblestone 100, minecraft:mossy_cobblestone 50 } ]
    S:pillar_blocks <
        minecraft:cobblestone 100
        minecraft:mossy_cobblestone 50
     >

    # Multiplier for how fast projectiles fired by gatling arrow tower traps move through the air.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:projectile_speed=1.0

    # The higher this value, the less accurate projectiles fired by gatling arrow tower traps are.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=18.0 ]
    D:projectile_variance=18.0
}


##########################################################################################################
# features_towers_potion
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of potion tower traps.
##########################################################################################################

features_towers_potion {
    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.04 ]
    D:_potion_chance=0.01

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_potion_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=42 ]
    I:_potion_height_max=42

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_potion_height_min=12

    # The trap will be triggered once a player comes within this distance (spherical distance).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=10.0 ]
    D:activation_range=10.0

    # When the sight check is enabled, potion arrow tower traps will only trigger when they have direct
    # line-of-sight to a player within activation range.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:activation_sight_check=true

    # Damage dealt by potion arrow tower traps' attacks. This translates roughly into half-hearts of damage.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=6.0 ]
    D:attack_damage=6.0

    # The maximumm delay between attack, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=60 ]
    I:attack_delay_max=60

    # The minimum delay between attacks, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=20 ]
    I:attack_delay_min=20

    # The maximum height the tower can generate to reach out of non-solid blocks (like lava).
    # Note that this allows the tower to stretch above the "_potion_height_max" setting.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=4 ]
    I:max_tower_height=4

    # A weighted list of blocks to pick from when generating the bottom portion of potion arrow tower traps.
    #    >> Block_Array:[ Value={ mod_id:block_id <value>, mod_id:block_id[<properties>] <value> }, Default={ minecraft:cobblestone 100, minecraft:mossy_cobblestone 50 } ]
    S:pillar_blocks <
        minecraft:cobblestone 100
        minecraft:mossy_cobblestone 50
     >

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:potion_testing_marker=false

    # Multiplier for how fast projectiles fired by potion arrow tower traps move through the air.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.0 ]
    D:projectile_speed=1.0

    # The higher this value, the less accurate projectiles fired by potion arrow tower traps are.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=6.0 ]
    D:projectile_variance=6.0

    # Duration of the blindness effect applied by blindness arrows, in ticks.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=400 ]
    I:type_blindness_duration=400

    # Potency of the instant damage effect applied by harm arrows.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:type_harm_potency=1

    # Duration of the hunger effect applied by hunger arrows, in ticks.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=400 ]
    I:type_hunger_duration=400

    # Potency of the hunger effect applied by hunger arrows.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:type_hunger_potency=0

    # Duration of the levitation effect applied by levitation arrows, in ticks.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=100 ]
    I:type_levitation_duration=100

    # Potency of the levitation effect applied by levitation arrows.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:type_levitation_potency=1

    # Duration of the poison effect applied by poison arrows, in ticks.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=200 ]
    I:type_poison_duration=200

    # Potency of the poison effect applied by poison arrows.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:type_poison_potency=0

    # Duration of the slowness effect applied by slowness arrows, in ticks. Default is equivalent to stray skeleton arrows.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=600 ]
    I:type_slowness_duration=600

    # Potency of the slowness effect applied by slowness arrows. Default is equivalent to stray skeleton arrows.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:type_slowness_potency=0

    # Duration of the weakness and fatigue effects applied by weakness arrows, in ticks.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=600 ]
    I:type_weakness_duration=600

    # Potency of the weakness and fatigue effects applied by weakness arrows.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:type_weakness_potency=0

    # Weight for the blindness potion arrow type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=2 ]
    I:type_weight_blindness=2

    # Weight for the harm potion arrow type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:type_weight_harm=1

    # Weight for the hunger potion arrow type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=2 ]
    I:type_weight_hunger=2

    # Weight for the levitation potion arrow type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:type_weight_levitation=1

    # Weight for the poison potion arrow type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=4 ]
    I:type_weight_poison=4

    # Weight for the random potion arrow type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:type_weight_random=1

    # Weight for the slowness potion arrow type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=4 ]
    I:type_weight_slowness=4

    # Weight for the weakness potion arrow type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=2 ]
    I:type_weight_weakness=2

    # Weight for the wither potion arrow type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:type_weight_wither=1

    # Duration of the wither effect applied by wither arrows, in ticks.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=200 ]
    I:type_wither_duration=200

    # Potency of the wither effect applied by wither arrows.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:type_wither_potency=0
}


##########################################################################################################
# features_towers_simple
#--------------------------------------------------------------------------------------------------------#
# Options related to the generation of simple tower traps.
##########################################################################################################

features_towers_simple {
    # The ratio of chunks to place this feature in.
    # This represents a chance for a placement attempt in each chunk from 0 to 1
    # (e.g., 0.1 means 10% chance per chunk).
    #    >> Float:[ Range={ 0.0, 1.0 }, Default=0.16 ]
    D:_simple_chance=0.04

    # The chance for a placement attempt when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_simple_chance_exceptions <
     >

    # The maximum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=60 ]
    I:_simple_height_max=60

    # The minimum height to generate this feature at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=12 ]
    I:_simple_height_min=12

    # The trap will be triggered once a player comes within this distance (spherical distance).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=10.0 ]
    D:activation_range=10.0

    # When the sight check is enabled, simple arrow tower traps will only trigger when they have direct
    # line-of-sight to a player within activation range.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:activation_sight_check=true

    # Damage dealt by simple arrow tower traps' attacks. This translates roughly into half-hearts of damage.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=8.0 ]
    D:attack_damage=8.0

    # The maximumm delay between attack, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=60 ]
    I:attack_delay_max=60

    # The minimum delay between attacks, in ticks. (20 ticks = 1 second)
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=20 ]
    I:attack_delay_min=20

    # The maximum height the tower can generate to reach out of non-solid blocks (like lava).
    # Note that this allows the tower to stretch above the "_simple_height_max" setting.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=4 ]
    I:max_tower_height=4

    # A weighted list of blocks to pick from when generating the bottom portion of simple arrow tower traps.
    #    >> Block_Array:[ Value={ mod_id:block_id <value>, mod_id:block_id[<properties>] <value> }, Default={ minecraft:cobblestone 100, minecraft:mossy_cobblestone 50 } ]
    S:pillar_blocks <
        minecraft:cobblestone 100
        minecraft:mossy_cobblestone 50
     >

    # Multiplier for how fast projectiles fired by simple arrow tower traps move through the air.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=1.5 ]
    D:projectile_speed=1.5

    # The higher this value, the less accurate projectiles fired by simple arrow tower traps are.
    #    >> Float:[ Range={ 0.0, Infinity }, Default=6.0 ]
    D:projectile_variance=6.0

    # When set to true, places a 1x1 column of glass to the height limit from a few blocks above each generated feature.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:simple_testing_marker=false
}


##########################################################################################################
# veins
#--------------------------------------------------------------------------------------------------------#
# Options related to material 'vein' generation in general.
##########################################################################################################

veins {
    # Number of additional vein types to generate.
    # Reload the game after setting this option for their config categories to be auto-generated.
    # There will be one config category per user-defined vein.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:_user_defined_veins=0

    # Suppresses andesite vein generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:disable_andesite_veins=false

    # Suppresses coal ore generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:disable_coal_veins=false

    # Suppresses diamond ore generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:disable_diamond_veins=false

    # Suppresses diorite vein generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:disable_diorite_veins=false

    # Suppresses dirt vein generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:disable_dirt_veins=false

    # Suppresses emerald ore generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:disable_emerald_veins=false

    # Suppresses gold ore generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:disable_gold_veins=false

    # Suppresses granite vein generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:disable_granite_veins=false

    # Suppresses gravel vein generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:disable_gravel_veins=false

    # Suppresses iron ore generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:disable_iron_veins=false

    # Suppresses lapis lazuli ore generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:disable_lapis_veins=false

    # Suppresses lava vein generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:disable_lava_veins=false

    # Suppresses quartz ore generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:disable_quartz_veins=false

    # Suppresses redstone ore generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:disable_redstone_veins=false

    # Suppresses silverfish vein generation events when set to true.
    # Does not disable generation added by this mod.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=true ]
    B:disable_silverfish_veins=true
}


##########################################################################################################
# veins_lava
#--------------------------------------------------------------------------------------------------------#
# Options related to lava 'vein' generation.
##########################################################################################################

veins_lava {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=4.0 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=32 ]
    I:height_max=32

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:height_min=0

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=3 ]
    I:size_max=3

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=3 ]
    I:size_min=3

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_sand
#--------------------------------------------------------------------------------------------------------#
# Options related to sand 'vein' generation.
##########################################################################################################

veins_sand {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.25 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=62 ]
    I:height_max=62

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:height_min=0

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=33 ]
    I:size_max=33

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=33 ]
    I:size_min=33

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_silverfish
#--------------------------------------------------------------------------------------------------------#
# Options related to silverfish 'vein' generation.
##########################################################################################################

veins_silverfish {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=10.0 ]
    D:_count=2.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=256 ]
    I:height_max=256

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=5 ]
    I:height_min=5

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=25 ]
    I:size_max=25

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=25 ]
    I:size_min=25

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_water
#--------------------------------------------------------------------------------------------------------#
# Options related to water 'vein' generation.
##########################################################################################################

veins_water {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=6.0 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=62 ]
    I:height_max=62

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:height_min=0

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=7 ]
    I:size_max=7

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=7 ]
    I:size_min=7

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_xtra_andesite
#--------------------------------------------------------------------------------------------------------#
# Options related to additional andesite vein generation.
# This ignores the 'disabled' vein settings, allowing you to replace normal vein generation.
# Defaults are equivalent to the vanilla values except for count (vanilla count is 0).
##########################################################################################################

veins_xtra_andesite {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.0 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=80 ]
    I:height_max=80

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:height_min=0

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=33 ]
    I:size_max=33

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=33 ]
    I:size_min=33

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_xtra_coal
#--------------------------------------------------------------------------------------------------------#
# Options related to additional coal vein generation.
# This ignores the 'disabled' vein settings, allowing you to replace normal vein generation.
# Defaults are equivalent to the vanilla values except for count (vanilla count is 0).
##########################################################################################################

veins_xtra_coal {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.0 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=128 ]
    I:height_max=128

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:height_min=0

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=17 ]
    I:size_max=17

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=17 ]
    I:size_min=17

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_xtra_diamond
#--------------------------------------------------------------------------------------------------------#
# Options related to additional diamond vein generation.
# This ignores the 'disabled' vein settings, allowing you to replace normal vein generation.
# Defaults are equivalent to the vanilla values except for count (vanilla count is 0).
##########################################################################################################

veins_xtra_diamond {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.0 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=16 ]
    I:height_max=16

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:height_min=0

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=8 ]
    I:size_max=8

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=8 ]
    I:size_min=8

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_xtra_diorite
#--------------------------------------------------------------------------------------------------------#
# Options related to additional diorite vein generation.
# This ignores the 'disabled' vein settings, allowing you to replace normal vein generation.
# Defaults are equivalent to the vanilla values except for count (vanilla count is 0).
##########################################################################################################

veins_xtra_diorite {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.0 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=80 ]
    I:height_max=80

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:height_min=0

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=33 ]
    I:size_max=33

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=33 ]
    I:size_min=33

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_xtra_dirt
#--------------------------------------------------------------------------------------------------------#
# Options related to additional dirt vein generation.
# This ignores the 'disabled' vein settings, allowing you to replace normal vein generation.
# Defaults are equivalent to the vanilla values except for count (vanilla count is 0).
##########################################################################################################

veins_xtra_dirt {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.0 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=256 ]
    I:height_max=256

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:height_min=0

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=33 ]
    I:size_max=33

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=33 ]
    I:size_min=33

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_xtra_emerald
#--------------------------------------------------------------------------------------------------------#
# Options related to additional emerald vein generation.
# This ignores the 'disabled' vein settings, allowing you to replace normal vein generation.
# Defaults are equivalent to the vanilla values except for count (vanilla count is 0).
##########################################################################################################

veins_xtra_emerald {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.0 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=32 ]
    I:height_max=32

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=4 ]
    I:height_min=4

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:size_max=1

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=1 ]
    I:size_min=1

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_xtra_gold
#--------------------------------------------------------------------------------------------------------#
# Options related to additional gold vein generation.
# This ignores the 'disabled' vein settings, allowing you to replace normal vein generation.
# Defaults are equivalent to the vanilla values except for count (vanilla count is 0).
##########################################################################################################

veins_xtra_gold {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.0 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=32 ]
    I:height_max=32

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:height_min=0

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=9 ]
    I:size_max=9

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=9 ]
    I:size_min=9

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_xtra_granite
#--------------------------------------------------------------------------------------------------------#
# Options related to additional granite vein generation.
# This ignores the 'disabled' vein settings, allowing you to replace normal vein generation.
# Defaults are equivalent to the vanilla values except for count (vanilla count is 0).
##########################################################################################################

veins_xtra_granite {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.0 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=80 ]
    I:height_max=80

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:height_min=0

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=33 ]
    I:size_max=33

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=33 ]
    I:size_min=33

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_xtra_gravel
#--------------------------------------------------------------------------------------------------------#
# Options related to additional gravel vein generation.
# This ignores the 'disabled' vein settings, allowing you to replace normal vein generation.
# Defaults are equivalent to the vanilla values except for count (vanilla count is 0).
##########################################################################################################

veins_xtra_gravel {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.0 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=256 ]
    I:height_max=256

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:height_min=0

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=33 ]
    I:size_max=33

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=33 ]
    I:size_min=33

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_xtra_iron
#--------------------------------------------------------------------------------------------------------#
# Options related to additional iron vein generation.
# This ignores the 'disabled' vein settings, allowing you to replace normal vein generation.
# Defaults are equivalent to the vanilla values except for count (vanilla count is 0).
##########################################################################################################

veins_xtra_iron {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.0 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=64 ]
    I:height_max=64

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:height_min=0

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=9 ]
    I:size_max=9

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=9 ]
    I:size_min=9

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_xtra_lapis
#--------------------------------------------------------------------------------------------------------#
# Options related to additional lapis vein generation.
# This ignores the 'disabled' vein settings, allowing you to replace normal vein generation.
# Defaults are equivalent to the vanilla values except for count (vanilla count is 0).
##########################################################################################################

veins_xtra_lapis {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.0 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=32 ]
    I:height_max=32

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:height_min=0

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=7 ]
    I:size_max=7

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=7 ]
    I:size_min=7

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_xtra_quartz
#--------------------------------------------------------------------------------------------------------#
# Options related to additional quartz vein generation.
# This ignores the 'disabled' vein settings, allowing you to replace normal vein generation.
# Defaults are equivalent to the vanilla values except for count (vanilla count is 0).
##########################################################################################################

veins_xtra_quartz {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.0 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=118 ]
    I:height_max=118

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=10 ]
    I:height_min=10

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=14 ]
    I:size_max=14

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=14 ]
    I:size_min=14

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


##########################################################################################################
# veins_xtra_redstone
#--------------------------------------------------------------------------------------------------------#
# Options related to additional redstone vein generation.
# This ignores the 'disabled' vein settings, allowing you to replace normal vein generation.
# Defaults are equivalent to the vanilla values except for count (vanilla count is 0).
##########################################################################################################

veins_xtra_redstone {
    # The number of placement attempts for this vein type.
    # A decimal represents a chance for a placement attempt (e.g., 0.3 means 30% chance for one attempt).
    #    >> Float:[ Range={ 0.0, Infinity }, Default=0.0 ]
    D:_count=0.0

    # The number of placement attempts when generating in particular locations.
    # More specific locations take priority over others (biome < biome* < global setting).
    #    >> Environment_Array:[ Value={ biome/mod_id:biome_id=value, biome/mod_id:prefix*=value }, Default={  } ]
    S:_count_exceptions <
     >

    # The maximum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=16 ]
    I:height_max=16

    # The minimum height to generate this vein type at.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=0 ]
    I:height_min=0

    # The maximum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=8 ]
    I:size_max=8

    # The minimum size for this vein type.
    #    >> Integer:[ Range={ 0, 2147483647 }, Default=8 ]
    I:size_min=8

    # When set to true, places a 1x1 column of this ore to the height limit from each generated vein.
    # This is game-breaking and laggy. You must also enable debug mode in the main mod config.
    # Consider using a tool to strip away all stone/dirt/etc. for more intensive testing.
    #    >> Boolean:[ Valid_Values={ true, false }, Default=false ]
    B:testing_marker=false
}


